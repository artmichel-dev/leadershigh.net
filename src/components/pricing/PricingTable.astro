---
import Container from '@components/shared/Container.astro'
import StarField from '@components/shared/StarField.astro'
import { Image } from 'astro:assets'
import { Icon } from 'astro-icon/components'

import spaceSpotlight from '@images/space-spotlight.png'
import longGradient from '@images/long-gradient.png'

type Plan = 'starter' | 'pro' | 'enterprise'

type FeaturePlans = {
  [key in Plan]: boolean | string | number
}

type Feature = {
  name: string
  plans: FeaturePlans
}

type Category = {
  category: string
  icon: string
  features: Feature[]
}

const pricingTableData: Category[] = [
  {
    category: 'Collaboration & Communication',
    icon: 'nucleo/team-16',
    features: [
      {
        name: 'Video Conferencing',
        plans: {
          starter: 'Up to 10 hrs/month',
          pro: 'Unlimited',
          enterprise: 'Unlimited',
        },
      },
      {
        name: 'Team Workspace',
        plans: {
          starter: 'Up to 5',
          pro: 'Unlimited',
          enterprise: 'Unlimited',
        },
      },
      {
        name: 'File Storage',
        plans: {
          starter: '5 GB',
          pro: '50 GB',
          enterprise: '1 TB',
        },
      },
      {
        name: 'Collaboration History',
        plans: {
          starter: '30 days',
          pro: '1 year',
          enterprise: 'Unlimited',
        },
      },
      {
        name: 'Instant Messaging',
        plans: {
          starter: true,
          pro: true,
          enterprise: true,
        },
      },
      {
        name: 'Guest Access',
        plans: {
          starter: false,
          pro: true,
          enterprise: true,
        },
      },
    ],
  },
  {
    category: 'Project Management & Workflow',
    icon: 'nucleo/roadmap-16',
    features: [
      {
        name: 'Custom Workflow Templates',
        plans: {
          starter: false,
          pro: 'Up to 10',
          enterprise: 'Unlimited',
        },
      },
      {
        name: 'Reporting and Analytics',
        plans: {
          starter: 'Basic',
          pro: 'Advanced',
          enterprise: 'Customizable',
        },
      },
      {
        name: 'Task Assignment',
        plans: {
          starter: true,
          pro: true,
          enterprise: true,
        },
      },
      {
        name: 'Gantt Charts',
        plans: {
          starter: false,
          pro: true,
          enterprise: true,
        },
      },
      {
        name: 'Time Tracking',
        plans: {
          starter: false,
          pro: true,
          enterprise: true,
        },
      },
      {
        name: 'Automated Workflow Triggers',
        plans: {
          starter: false,
          pro: true,
          enterprise: true,
        },
      },
    ],
  },
  {
    category: 'Security & Compliance',
    icon: 'nucleo/padlock-unlocked-16',
    features: [
      {
        name: 'Audit Logs',
        plans: {
          starter: false,
          pro: '6 months',
          enterprise: 'Unlimited',
        },
      },
      {
        name: 'Data Encryption',
        plans: {
          starter: true,
          pro: true,
          enterprise: true,
        },
      },
      {
        name: 'Two-Factor Authentication (2FA)',
        plans: {
          starter: true,
          pro: true,
          enterprise: true,
        },
      },
      {
        name: 'Compliance Reporting',
        plans: {
          starter: false,
          pro: true,
          enterprise: true,
        },
      },
      {
        name: 'Role-Based Access Control',
        plans: {
          starter: false,
          pro: true,
          enterprise: true,
        },
      },
      {
        name: 'API Security',
        plans: {
          starter: false,
          pro: true,
          enterprise: true,
        },
      },
    ],
  },
  {
    category: 'Integration & Extensibility',
    icon: 'nucleo/algorithm-16',
    features: [
      {
        name: 'API Access',
        plans: {
          starter: 'Limited',
          pro: 'Full access',
          enterprise: 'Full access',
        },
      },
      {
        name: 'Marketplace Access',
        plans: {
          starter: 'Basic',
          pro: 'Full access',
          enterprise: 'Full access',
        },
      },
      {
        name: 'Third-Party App Integrations',
        plans: {
          starter: 3,
          pro: 10,
          enterprise: 'Unlimited',
        },
      },
      {
        name: 'Webhooks',
        plans: {
          starter: false,
          pro: true,
          enterprise: true,
        },
      },
      {
        name: 'SDK Access',
        plans: {
          starter: false,
          pro: true,
          enterprise: true,
        },
      },
      {
        name: 'Custom Integrations',
        plans: {
          starter: false,
          pro: true,
          enterprise: true,
        },
      },
    ],
  },
]
const planLabels: Plan[] = ['starter', 'pro', 'enterprise']
---

<section
  class="relative overflow-hidden bg-[linear-gradient(rgba(24,24,27,0.95),rgba(24,24,27,0.95)),linear-gradient(#1E3A8A,#1E3A8A)] pb-16 pt-20 sm:py-24 lg:py-28"
>
  <div
    class="absolute left-0 top-0 w-full max-w-7xl -translate-x-1/2 -translate-y-1/2"
  >
    <Image
      src={spaceSpotlight}
      alt=""
      class="h-full w-full object-contain"
      widths={[420, 768, 1024, 1280]}
      sizes={`(max-width: 420px) 420px, (max-width: 768px) 768px, (max-width: 1024px) 1024px, (min-width: 1024px) 1280px`}
    />
  </div>

  {/* Stars */}
  <div class="absolute left-0 top-0 z-0 h-72 w-72" aria-hidden="true">
    <StarField density="high" maxRadius={2.5} minRadius={1.25} />
  </div>

  <div class="absolute -top-96 bottom-48 left-0 right-80 z-0">
    <Image
      src={longGradient}
      alt=""
      class="h-full w-full object-contain object-center opacity-50"
      widths={[420, 768, 1024]}
      sizes={`(max-width: 420px) 420px, (max-width: 768px) 768px, (min-width: 768px) 1024px`}
    />
  </div>

  <div class="absolute -bottom-96 -right-2/3 left-0 top-1/2 z-0">
    <Image
      src={longGradient}
      alt=""
      class="h-full w-full object-contain object-center opacity-40"
      widths={[420, 768, 1024]}
      sizes={`(max-width: 420px) 420px, (max-width: 768px) 768px, (min-width: 768px) 1024px`}
    />
  </div>
  <Container>
    {/* Heading */}
    <div class="relative flex flex-col items-center">
      <h1
        class="max-w-4xl text-center text-4xl font-bold leading-extratight text-blue-100 sm:text-5xl sm:leading-extratight"
      >
        Compare all planÂ details
      </h1>
    </div>

    {/* Tables */}
    <div class="-mx-5 -my-2 mt-12 overflow-x-auto sm:-mx-6 sm:mt-16 lg:-mx-8">
      <div
        class="inline-block min-w-full px-5 py-2 align-middle sm:px-6 lg:px-8"
      >
        <div class="min-w-full space-y-12">
          {
            pricingTableData.map((category) => (
              <table class="min-w-full">
                <thead>
                  <tr class="border-b border-blue-200/10">
                    <th
                      scope="col"
                      class="text-left text-sm font-semibold text-white sm:pl-2"
                    >
                      <div class="inline-flex w-max rounded-full bg-zinc-950/[.01] shadow-inner-blur">
                        <div class="flex h-full w-full items-center space-x-2 rounded-full border border-blue-200/[.06] px-4 py-1.5">
                          <Icon
                            name={category.icon}
                            class="h-[14px] w-[14px] text-blue-200"
                          />
                          <span class="text-sm font-medium text-blue-100 drop-shadow-[-12px_-4px_6px_rgba(219,234,254,0.2)]">
                            {category.category}
                          </span>
                        </div>
                      </div>
                    </th>
                    {planLabels.map((planLabel) => (
                      <th
                        scope="col"
                        class:list={[
                          'flex-1 text-nowrap px-3 py-6 text-center text-sm font-semibold',
                          planLabel === 'pro'
                            ? 'text-cyan-400'
                            : 'text-zinc-300',
                        ]}
                      >
                        {planLabel.charAt(0).toUpperCase() + planLabel.slice(1)}{' '}
                        plan
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {category.features.map((feature, rowIndex) => (
                    <tr class="w-full border-b border-blue-200/[0.06]">
                      <td class="whitespace-nowrap py-5 pl-6 text-left text-sm font-medium text-white sm:py-6 sm:pl-8">
                        {feature.name}
                      </td>
                      {planLabels.map((plan, planIndex) => (
                        <td
                          class:list={[
                            'relative flex-1 justify-center whitespace-nowrap px-4 py-5 text-center text-sm leading-4 text-zinc-200 before:absolute before:inset-y-0 before:left-0 before:h-full before:w-px before:bg-gradient-to-b after:absolute after:left-[0.5px] after:top-1/2 after:h-3.5 after:w-px after:-translate-y-1/2 after:translate-x-[-0.5px] after:bg-gradient-to-b after:from-blue-200/10 after:via-cyan-300/20 after:to-blue-200/10 sm:py-6',
                            (3 * rowIndex + planIndex) % 2
                              ? 'before:from-blue-200/[0.025] before:to-blue-200/[0.08]'
                              : 'before:from-blue-200/[0.08] before:to-blue-200/[0.025]',
                          ]}
                        >
                          {typeof feature.plans[plan] === 'boolean'
                            ? feature.plans[plan] && (
                                <Icon
                                  name="nucleo/o-check-16"
                                  class:list={[
                                    'mx-auto h-3 w-3 shrink-0',
                                    plan === 'pro'
                                      ? 'text-cyan-400'
                                      : 'text-blue-100',
                                  ]}
                                />
                              )
                            : feature.plans[plan]}
                        </td>
                      ))}
                    </tr>
                  ))}
                </tbody>
              </table>
            ))
          }
        </div>
      </div>
    </div>
  </Container>
</section>
