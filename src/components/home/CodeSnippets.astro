---
import StarField from '@components/shared/StarField.astro'
import { Image } from 'astro:assets'
import { Icon } from 'astro-icon/components'
import { Code } from 'astro:components'

import spaceSpotlight from '@images/space-spotlight.png'
import cosmicButterfly from '@images/cosmic-butterfly-2.svg'

const sampleCodeBlock = `module.exports = leftpad;

function leftpad(str, len, ch) {
  str = String(str);
  var i = -1;

  if (!ch && ch !== 0) ch = ' ';

  len = len - str.length;

  while (i++ < len) {
    str = ch + str;
  }
  return str;
}
`

const features = [
  {
    title: 'Real-time collaboration',
    description:
      'Seasonal latte black java dark blue fair grounds barista black origin french caffeine body. ',
    icon: 'heroicons:clock-20-solid',
    active: true,
    codeBlocks: [
      {
        language: 'javascript',
        code: sampleCodeBlock,
      },
      {
        language: 'javascript',
        code: sampleCodeBlock,
      },
    ],
  },
  {
    title: 'Customize your stack',
    description:
      'Seasonal latte black java dark blue fair grounds barista black origin french caffeine body. ',
    icon: 'heroicons:rectangle-stack-20-solid',
    active: false,
    codeBlocks: [
      {
        language: 'javascript',
        code: sampleCodeBlock,
      },
      {
        language: 'javascript',
        code: sampleCodeBlock,
      },
    ],
  },
  {
    title: 'Port to any environment',
    description:
      'Seasonal latte black java dark blue fair grounds barista black origin french caffeine body. ',
    icon: 'heroicons:computer-desktop-20-solid',
    active: false,
    codeBlocks: [
      {
        language: 'javascript',
        code: sampleCodeBlock,
      },
      {
        language: 'javascript',
        code: sampleCodeBlock,
      },
    ],
  },
  {
    title: 'Integrate modern tools',
    description:
      'Seasonal latte black java dark blue fair grounds barista black origin french caffeine body. ',
    icon: 'heroicons:squares-plus-20-solid',
    active: false,
    codeBlocks: [
      {
        language: 'javascript',
        code: sampleCodeBlock,
      },
      {
        language: 'javascript',
        code: sampleCodeBlock,
      },
    ],
  },
]
---

<section
  class="relative overflow-hidden bg-[linear-gradient(rgba(24,24,27,0.95),rgba(24,24,27,0.95)),linear-gradient(#1E3A8A,#1E3A8A)] py-20 sm:py-24 lg:py-32 xl:py-40"
>
  <div
    class="absolute left-0 top-0 w-full max-w-7xl -translate-x-1/2 -translate-y-1/2"
  >
    <Image
      src={spaceSpotlight}
      widths={[420, 768, 1024, 1280]}
      sizes={`(max-width: 420px) 420px, (max-width: 768px) 768px, (max-width: 1024px) 1024px, (min-width: 1024px) 1280px`}
      alt=""
      class="h-full w-full object-contain"
    />
  </div>

  {/* Stars */}
  <div class="absolute left-0 top-0 z-0 h-72 w-72" aria-hidden="true">
    <StarField density="high" maxRadius={2.5} minRadius={1.25} />
  </div>
  <div
    class="splide mx-auto max-w-lg px-5 sm:max-w-3xl sm:px-6 lg:ml-auto lg:mr-0 lg:grid lg:max-w-screen-2xl lg:grid-cols-10 lg:px-8 xl:grid-cols-11 2xl:max-w-[calc(100vw_-_((100vw_-_1280px)_/_2))]"
  >
    <div class="flex items-center lg:col-span-6 xl:col-span-6">
      <div class="relative z-10 flex flex-col">
        <div
          class="inline-flex w-max rounded-full bg-zinc-950/[.01] shadow-inner-blur"
        >
          <div
            class="flex h-full w-full items-center space-x-2 rounded-full border border-blue-200/[.06] px-4 py-1.5"
          >
            <Icon
              name="heroicons:presentation-chart-line-16-solid"
              class="h-4 w-4 text-blue-200"
            />
            <span
              class="text-sm font-medium text-blue-100 drop-shadow-[-12px_-4px_6px_rgba(219,234,254,0.2)]"
            >
              Productivity enhancing tools
            </span>
          </div>
        </div>
        <h1
          class="mt-5 text-4xl font-bold leading-extratight text-blue-100 xl:text-[2.75rem] xl:leading-extratight"
        >
          Foundational building blocks for seamless collaboration
        </h1>

        {/*  Text content */}
        <div class="mt-6">
          <p
            class="text-lg leading-8 text-zinc-300 lg:text-[17px] xl:text-lg xl:leading-8"
          >
            That robust shop as rich siphon in organic french so acerbic
            plunger. Au foam strong irish press go body and sugar kopi viennese
            percolator beans coffee.
          </p>
          <p
            class="mt-8 text-lg leading-8 text-zinc-300 lg:text-[17px] lg:leading-8 xl:text-lg xl:leading-8"
          >
            Doppio sugar seasonal in caf√© sugar ut at robust eu percolator shop.
            Kopi est espresso bar to carajillo trifecta robust sit foam viennese
            aromatic variety. Trade panna robust robust trade chicory con
            acerbic that skinny. Latte acerbic a brewed acerbic arabica body and
            iced plunger saucer wings crema.
          </p>
        </div>

        {/* Features */}
        <div
          class="mt-12 grid gap-2.5 sm:grid-cols-2 sm:gap-5 lg:gap-4 xl:gap-5"
        >
          {
            features.map((feature) => (
              <div
                class:list={[
                  'feature cursor-pointer rounded-2xl duration-200',
                  feature.active && 'active',
                ]}
              >
                <div class="h-full w-full rounded-2xl border p-6 lg:p-5 xl:p-6">
                  <div class="flex items-center space-x-2">
                    <Icon
                      name={feature.icon}
                      class="h-[17px] w-[17px] text-blue-50 lg:h-4 lg:w-4 xl:h-[17px] xl:w-[17px]"
                    />
                    <h3 class="text-[17px] font-semibold text-white lg:text-base xl:text-[17px]">
                      {feature.title}
                    </h3>
                  </div>
                  <p class="mt-2 text-[17px] leading-7 text-zinc-300 lg:text-base lg:leading-7 xl:text-[17px] xl:leading-7">
                    {feature.description}
                  </p>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>
    <div class="mt-12 lg:col-span-4 lg:pl-10 xl:col-span-5 xl:pl-24">
      <div class="splide__track !overflow-visible">
        <ul class="splide__list list-none">
          {/* for each feature loop through the codeBlocks */}
          {
            features.map((feature) => (
              <div
                class:list={[
                  'splide__slide transition-opacity duration-200 lg:duration-1000',
                  !feature.active && 'opacity-0 lg:opacity-15',
                ]}
              >
                <div class="flex min-h-[805px] flex-col justify-center space-y-10">
                  {feature.codeBlocks.map((codeBlock) => (
                    <li class="relative w-full rounded-2xl border border-blue-200/[.08] bg-white/[.01] p-2 shadow-inner-blur">
                      <div class="absolute -bottom-20 -left-48 -right-16 -top-40">
                        <Image
                          src={cosmicButterfly}
                          alt=""
                          class="h-full w-full object-contain"
                        />
                      </div>

                      <div class="relative h-full w-full rounded-lg bg-[#292D3E]/[0.93] shadow-inner-blur backdrop-blur">
                        <div class="flex h-full flex-col rounded-lg border border-blue-200/[.06]">
                          <div class="flex items-center space-x-1.5 rounded-tl-lg rounded-tr-lg bg-zinc-700/25 px-4 py-3 shadow-inner-blur-no-border">
                            <span class="h-2 w-2 rounded-full bg-blue-50/25" />
                            <span class="h-2 w-2 rounded-full bg-blue-50/25" />
                            <span class="h-2 w-2 rounded-full bg-blue-50/25" />
                          </div>
                          <div class="h-full rounded-b-lg border-t border-blue-200/[.06]">
                            <Code
                              lang="js"
                              code={codeBlock.code}
                              theme="material-theme-palenight"
                              class="h-full rounded-b-lg p-5 text-sm"
                            />
                          </div>
                        </div>
                      </div>
                    </li>
                  ))}
                </div>
              </div>
            ))
          }
        </ul>
      </div>
    </div>
  </div>
</section>

<script>
  import Splide from '@splidejs/splide'
  import '@splidejs/splide/css'

  let splideInstance: Splide | null = null
  let clickListeners: EventListener[] = []

  function initializeSplide() {
    const features = document.querySelectorAll('.feature')

    // Destroy existing Splide instance if present
    if (splideInstance) {
      splideInstance.destroy(true)
      splideInstance = null
      // Remove previous event listeners
      features.forEach((feature, index) => {
        feature.removeEventListener('click', clickListeners[index])
      })
    }

    if (features.length === 0) {
      return
    }

    const splideSlides = document.querySelectorAll('.splide__slide')!
    const splideContainer = document.querySelector('.splide__slide > div')!
    const splideTrack = document.querySelector('.splide__track')! as HTMLElement

    splideInstance = new Splide('.splide', {
      speed: 800,
      pagination: false,
      arrows: false,
      drag: false,
      direction: 'ttb',
      height: splideContainer.clientHeight,
      autoHeight: true,
      perPage: 1,
      gap: '3rem',
      breakpoints: {
        640: {
          perPage: 1,
        },
      },
    }).mount()

    clickListeners = Array.from(features).map((feature, index) => {
      const clickHandler = () => {
        splideInstance?.go(index) // Navigate to the slide corresponding to the clicked feature
        const prevActive = document.querySelector('.feature.active')!
        prevActive.classList.remove('active')
        feature.classList.add('active')
      }

      feature.addEventListener('click', clickHandler)
      return clickHandler
    })

    splideSlides.forEach((slide) => {
      const slideElement = slide as HTMLElement
      // set the height to its child height
      slideElement.style.height = slideElement.children[0].clientHeight + 'px'
    })

    splideInstance.on('mounted move', (newIndex, prevIndex) => {
      // Get current slide
      const currentSlide = splideSlides[newIndex]
      const prevSlide = splideSlides[prevIndex]
      currentSlide.classList.remove('opacity-0', 'lg:opacity-15')
      prevSlide.classList.add('opacity-0', 'lg:opacity-15')
      // Set the height of the track to the current slide height
      splideTrack.style.height = currentSlide.clientHeight + 'px'
    })
  }

  initializeSplide()
</script>
