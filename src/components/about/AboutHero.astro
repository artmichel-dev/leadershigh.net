---
import Investors from './Investors.astro'
import Container from '@components/shared/Container.astro'
import Button from '@components/shared/Button.astro'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'

import cosmicButterfly from '@images/cosmic-butterfly.png'
import company01 from '@images/company-01.png'
import company02 from '@images/company-02.png'
import company03 from '@images/company-03.png'
import company04 from '@images/company-04.png'
import company05 from '@images/company-05.png'

const companyImages = [
  {
    image: company01,
    alt: 'Group of coworkers in a meeting, discussing around a table',
  },
  {
    image: company02,
    alt: 'Team collaborating over charts and documents in a meeting room',
  },
  {
    image: company03,
    alt: 'Group of colleagues working together at a shared workspace',
  },
  {
    image: company04,
    alt: 'Two people playing foosball in a modern office',
  },
  {
    image: company05,
    alt: 'Coworkers celebrating a birthday in the office with a sign',
  },
]

const getVerticalOffsetClassName = (index: number) => {
  const classes = [
    '',
    'sm:translate-y-20 lg:translate-y-32',
    'sm:translate-y-10 lg:translate-y-16',
    'sm:-translate-y-5 lg:-translate-y-8',
    'sm:translate-y-5 lg:translate-y-8',
  ]
  return classes[index % classes.length]
}
---

<Container class="pb-16 pt-20 sm:pb-20 lg:pt-28">
  <div
    class="relative z-10 mx-auto max-w-lg sm:max-w-2xl lg:mx-0 lg:grid lg:max-w-none lg:grid-cols-12 lg:items-start lg:gap-x-8 xl:grid-cols-2 xl:gap-x-12 2xl:gap-x-20"
  >
    {/* Heading */}
    <div id="about-text-header" class="lg:col-span-7 xl:col-span-1">
      <h1
        class="relative z-10 text-4xl font-bold leading-extratight text-blue-100 sm:text-[2.75rem] sm:leading-extratight lg:text-5xl lg:leading-extratight"
      >
        Our goal is to empower people to excel in the era of remote work
      </h1>
    </div>

    {/* Text and button */}
    <div class="mt-5 lg:col-span-5 lg:mt-0 xl:col-span-1">
      <div class="lg:ml-auto lg:mt-2 lg:max-w-lg">
        <p class="text-lg leading-8 text-zinc-300">
          Nebula powers a future of flexibility, security, and connectivity,
          enabling seamless workflows that drive <span class="text-blue-200"
            >productivity, efficiency and growth.</span
          >
        </p>
        <div class="mt-8">
          <Button href="#about-story" variant="secondary">
            <span>Learn more</span>
            <Icon
              name="heroicons:chevron-double-down-16-solid"
              class="h-4 w-4"
            />
          </Button>
        </div>
      </div>
    </div>
  </div>

  {/* Images */}
  <div class="images-wrapper mt-16 flex gap-5 lg:mt-24">
    {
      companyImages.map((companyImage, index) => (
        <div
          class:list={[
            'image-container relative aspect-[9/16] w-60 flex-shrink-0 rounded-2xl border border-blue-200/[.08] bg-white/[.01] p-2 shadow-inner-blur lg:w-64 xl:w-72',
            getVerticalOffsetClassName(index),
          ]}
        >
          <div class="absolute -bottom-24 -left-24 -right-24 -top-40">
            <Image
              src={cosmicButterfly}
              alt=""
              widths={[496]}
              class="h-full w-full -rotate-6 opacity-45"
            />
          </div>

          <Image
            src={companyImage.image}
            alt={companyImage.alt}
            class="relative h-full w-full rounded-lg object-cover"
          />
        </div>
      ))
    }
  </div>

  <Investors class="mt-20 sm:mt-56 lg:mt-72" />
</Container>

<style>
  :root {
    --scroll-progress: 0;
    --max-translate-x: 0;
    --max-translate-y: 0;
  }

  .image-container {
    --overshoot-translate: calc(var(--initial-translate) * -1);
    transform: translateY(
      calc(
        var(--initial-translate) * (1 - var(--scroll-progress)) +
          var(--overshoot-translate) * var(--scroll-progress)
      )
    );
    transition: transform 0.3s ease-out;
  }

  .images-wrapper {
    transform: translate(
      calc(var(--max-translate-x) * var(--scroll-progress)),
      calc(var(--max-translate-y) * var(--scroll-progress))
    );
    transition: transform 0.3s ease-out;
  }
</style>

<script>
  let initialWidth = window.innerWidth

  function handleScroll(): void {
    const textHeader = document.getElementById('about-text-header')
    if (!textHeader) return

    const scrollProgress =
      window.scrollY / (getOffsetTop(textHeader) + textHeader.offsetHeight)

    const clampedScrollProgress = Math.max(0, Math.min(scrollProgress, 1))
    document.documentElement.style.setProperty(
      '--scroll-progress',
      clampedScrollProgress.toString()
    )
  }

  function getOffsetTop(element: HTMLElement | null): number {
    let offsetTop = 0
    while (element) {
      offsetTop += element.offsetTop
      element = element.offsetParent as HTMLElement | null
    }
    return offsetTop
  }

  function initializeImages(): void {
    const images = document.querySelectorAll<HTMLElement>('.image-container')
    images.forEach((container) => {
      const initialTranslate = getInitialTranslate(container.className)
      container.style.setProperty(
        '--initial-translate',
        `${initialTranslate}px`
      )
      container.style.setProperty(
        '--overshoot-translate',
        `${-1 * initialTranslate}px`
      )
    })

    const maxTranslateY = calculateMaxTranslateY(images)
    const maxTranslateX = calculateMaxTranslateX(images)

    document.documentElement.style.setProperty(
      '--max-translate-x',
      `${maxTranslateX * -1}px`
    )
    document.documentElement.style.setProperty(
      '--max-translate-y',
      `${maxTranslateY}px`
    )
  }

  function getInitialTranslate(className: string): number {
    const viewportWidth = window.innerWidth

    const classes = className.split(' ')
    let translateValue = 0

    if (viewportWidth >= 1024) {
      // lg breakpoint
      classes.forEach((cls) => {
        if (cls.startsWith('lg:')) {
          translateValue = getTranslateValue(cls.replace('lg:', ''))
        }
      })
    } else if (viewportWidth >= 640) {
      // sm breakpoint
      classes.forEach((cls) => {
        if (cls.startsWith('sm:')) {
          translateValue = getTranslateValue(cls.replace('sm:', ''))
        }
      })
    } else {
      // default
      classes.forEach((cls) => {
        if (!cls.startsWith('sm:') && !cls.startsWith('lg:')) {
          translateValue = getTranslateValue(cls)
        }
      })
    }

    return translateValue
  }

  function getTranslateValue(className: string): number {
    if (className.includes('translate-y-32')) return 128
    if (className.includes('translate-y-20')) return 80
    if (className.includes('translate-y-16')) return 64
    if (className.includes('translate-y-10')) return 40
    if (className.includes('-translate-y-8')) return -32
    if (className.includes('-translate-y-5')) return -20
    if (className.includes('-translate-y-4')) return -16
    if (className.includes('-translate-y-2.5')) return -10
    if (className.includes('translate-y-8')) return 32
    if (className.includes('translate-y-5')) return 20
    if (className.includes('translate-y-4')) return 16
    if (className.includes('translate-y-2.5')) return 10
    return 0
  }

  function calculateMaxTranslateY(images: NodeListOf<HTMLElement>): number {
    return Math.max(
      ...Array.from(images).map((imageContainer) =>
        getInitialTranslate(imageContainer.className)
      )
    )
  }

  function calculateMaxTranslateX(images: NodeListOf<HTMLElement>): number {
    const imagesWrapper = document.querySelector<HTMLElement>('.images-wrapper')
    if (!imagesWrapper) return 0

    const imagesWrapperRect = imagesWrapper.getBoundingClientRect()
    const totalWidth =
      Array.from(images).reduce((acc, container) => {
        return acc + container.getBoundingClientRect().width
      }, 0) +
      (images.length - 1) * parseFloat(getComputedStyle(imagesWrapper).gap)

    const viewportWidth = window.innerWidth
    return (totalWidth - viewportWidth) / 2 + imagesWrapperRect.x
  }

  function handleResize() {
    const currentWidth = window.innerWidth
    if (currentWidth !== initialWidth) {
      initializeImages()
      initialWidth = currentWidth // Update initialWidth to the new width
    }
  }

  function initializeComponent(): void {
    const imagesWrapper = document.querySelector('.images-wrapper')
    if (!imagesWrapper) return

    document.addEventListener('scroll', handleScroll)
    window.addEventListener('resize', handleResize)
    initializeImages()
  }

  // Cleanup event listeners (if using ViewTransition)
  function cleanupComponent(): void {
    document.removeEventListener('scroll', handleScroll)
    window.removeEventListener('resize', handleResize)
  }

  initializeComponent()
</script>
